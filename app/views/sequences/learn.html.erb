<% content_for :title, "Learn" %>

<canvas id="learn-canvas" width="1400" height="400"></canvas>

<div class="drum-name">Crash Cymbal</div>
<button class="btn btn-default" id="back">&#8592; Back</button>
<button class="btn btn-default" id="next">Next &#8594;</button>

<%= javascript_tag "var sequence = #{@sequence.to_json}" %>
<%= javascript_tag "var notes = #{@sequence.notes.to_json}" %>

<script>
  var drums = ['Crash Cymbal', 'Hi-Hat', 'Ride Cymbal', 'Left Tom', 'Right Tom', 'Snare Drum', 'Floor Tom', 'Bass Drum'];

  var c = document.getElementById("learn-canvas");
  var ctx = c.getContext("2d");
  var TOP_OFFSET = 100;
  var LINE_SPREAD = 40;
  var WIDTH_MULTIPLIER = 1.5;

  //draw lines
  var drawLines = function() {
    for (var i=0; i < 6*LINE_SPREAD; i+=LINE_SPREAD) {
      ctx.beginPath();
      ctx.strokeStyle = "black";
      ctx.moveTo(0,i+TOP_OFFSET);
      ctx.lineTo(c.width,i+TOP_OFFSET);
      ctx.stroke();
    }

    ctx.beginPath();
    ctx.strokeStyle = "#FF0000";
    ctx.moveTo(LINE_SPREAD*WIDTH_MULTIPLIER / 2, 0);
    ctx.lineTo(LINE_SPREAD*WIDTH_MULTIPLIER / 2, 10*LINE_SPREAD);
    ctx.stroke();
  }

  drawLines(ctx);

  // var testNotes = [];
  // for (var i = 0; i < 55; i++) {
  //   testNotes.push(new Note(i%7, 1));
  // }

  // var testSequence = new Sequence(testNotes);

  var increment_locs = function(sequence, cur_bar, cur_beat) {
    if (cur_beat == 3 /*sequence.meter_top - 1*/) {
      return [cur_bar + 1, 0];
    } else {
      return [cur_bar, cur_beat + 1];
    }
  }
  var decrement_locs = function(sequence, cur_bar, cur_beat) {
    if (cur_beat == 0) {
      return [cur_bar - 1, 3 /*sequence.meter_top - 1*/];
    } else {
      return [cur_bar, cur_beat - 1];
    }
  }

  var startSequence = function(sequence) {
    var cur_bar = 0;
    var cur_beat = 0;
    sequence.draw(ctx, cur_bar, cur_beat);

    var stepSequence = function() {
      var cur_loc = increment_locs(sequence, cur_bar, cur_beat);
      cur_bar = cur_loc[0];
      cur_beat = cur_loc[1];
      ctx.clearRect(0, 0, c.width, c.height);
      drawLines();
      sequence.draw(ctx, cur_bar, cur_beat);
      for (var i = 0; i < notes.length; i++) {
        if (notes[i].bar == cur_bar && notes[i].beat == cur_beat) {
          $('.drum-name').text(drums[notes[i].drum]);
          break;
        }
      }
    }

    var stepBackSequence = function() {
      if (!(cur_bar == 0 && cur_beat == 0)) {
        var cur_loc = decrement_locs(sequence, cur_bar, cur_beat);
        cur_bar = cur_loc[0];
        cur_beat = cur_loc[1];
        ctx.clearRect(0, 0, c.width, c.height);
        drawLines();
        sequence.draw(ctx, cur_bar, cur_beat);
        for (var i = 0; i < notes.length; i++) {
          if (notes[i].bar == cur_bar && notes[i].beat == cur_beat) {
            $('.drum-name').text(drums[notes[i].drum]);
            break;
          }
        }
      }
    }

    var testSequence = drawSequence.notes // TODO: remove this test code

    var hitSource = new EventSource("/serial");
    hitSource.onmessage = function(e) {
      var hit = jQuery.parseJSON (e.data);
      console.log(hit);

      // TODO: remove this test code
      if (hit.drum == testSequence[0].drum) {
        testSequence.shift();
        stepSequence();
      }
    }

    // hitSource.onopen = function (e) {
    //   console.log("OPEN state \n"+e.data);
    // };

    // hitSource.onmessage = function(e) {
    //   var hit = jQuery.parseJSON( e.data );
    //   console.log(hit.drum);

      // TODO: start time needs to accurately correlate to bar/beat in sequence
      // TODO: support for checking if both notes at same time are hit
    //   if (hit.drum == drawSequence.notes[hit.start].drum) {
    //     console.log("HIT");
    //     stepSequence();
    //   }
    // };

    // hitSource.onerror = function (e) {
    //    console.log("Error State  \n\n"+e.data);
    // };

    $("#next").click(function(evt) {
      stepSequence();
    });
    $("#back").click(function(evt) {
      stepBackSequence();
    });
  }



  var drawNotes = [];
  for (var i = 0; i < notes.length; i++) {
    drawNotes.push(new Note(notes[i]));
  }

  var drawSequence = new Sequence(drawNotes, sequence);

  startSequence(drawSequence);





</script>