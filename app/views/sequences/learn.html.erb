<% content_for :title, "Learn" %>

<button class="play-btn" id="learn-play-btn">PLAY</button>

<canvas id="learn-canvas" width="1400" height="400"></canvas>

<div class="drum-name" id="drum-name0"></div>
<div class="drum-name" id="drum-name1"></div>
<div class="drum-name" id="drum-name2"></div>

<%= javascript_include_tag "learn" %>

<%= javascript_tag "var sequence = #{@sequence.to_json}" %>
<%= javascript_tag "var notes = #{@sequence.notes.to_json}" %>

<script>
  var drums = ['Crash Cymbal', 'Hi-Hat', 'Ride Cymbal', 'Left Tom', 'Right Tom', 'Snare Drum', 'Floor Tom', 'Bass Drum'];

  var c = document.getElementById("learn-canvas");
  var ctx = c.getContext("2d");
  var TOP_OFFSET = 100;
  var LINE_SPREAD = 40;
  var WIDTH_MULTIPLIER = 2.2;
  var NOTE_SPACING = 30;

  var clefObj = new Image();

  clefObj.onload = function() {
    ctx.drawImage(clefObj, 0, TOP_OFFSET-LINE_SPREAD, LINE_SPREAD*3, 7*LINE_SPREAD);
  };

  // code in different note images based on this.drum
  clefObj.src = '/assets/g-clef.png';

  console.log(sequence);
  //draw meter
  ctx.font="100px Arial";
  ctx.fillText(sequence.meter_top, LINE_SPREAD*3.1, LINE_SPREAD*2 + TOP_OFFSET);
  ctx.fillRect(LINE_SPREAD*3.1, LINE_SPREAD*2 + TOP_OFFSET + 3, LINE_SPREAD*1.4, LINE_SPREAD/10);
  ctx.fillText(sequence.meter_bottom, LINE_SPREAD*3.1, LINE_SPREAD*4 + TOP_OFFSET);

  //draw lines
  var drawLines = function() {
    for (var i=0; i < 6*LINE_SPREAD; i+=LINE_SPREAD) {
      ctx.beginPath();
      ctx.strokeStyle = "black";
      ctx.lineWidth = 2.0;
      ctx.moveTo(0,i+TOP_OFFSET);
      ctx.lineTo(c.width,i+TOP_OFFSET);
      ctx.stroke();
    }

    ctx.beginPath();
    ctx.strokeStyle = "black";
    ctx.moveTo(0,TOP_OFFSET);
    ctx.lineTo(0,(5*LINE_SPREAD)+TOP_OFFSET);
    ctx.stroke();

    ctx.beginPath();
    ctx.strokeStyle = "#FF0000";
    ctx.moveTo(LINE_SPREAD*5 - NOTE_SPACING/2 + LINE_SPREAD*WIDTH_MULTIPLIER / 2, 0);
    ctx.lineTo(LINE_SPREAD*5 - NOTE_SPACING/2 + LINE_SPREAD*WIDTH_MULTIPLIER / 2, 10*LINE_SPREAD);
    ctx.stroke();

  }

  drawLines(ctx);

  // var testNotes = [];
  // for (var i = 0; i < 55; i++) {
  //   testNotes.push(new Note(i%7, 1));
  // }

  // var testSequence = new Sequence(testNotes);

  var increment_locs = function(sequence, cur_bar, cur_beat) {
    if (cur_beat == 3 /*sequence.meter_top - 1*/) {
      return [cur_bar + 1, 0];
    } else {
      return [cur_bar, cur_beat + 1];
    }
  }
  var decrement_locs = function(sequence, cur_bar, cur_beat) {
    if (cur_beat == 0) {
      return [cur_bar - 1, 3 /*sequence.meter_top - 1*/];
    } else {
      return [cur_bar, cur_beat - 1];
    }
  }

  var startSequence = function(sequence) {
    var cur_bar = 0;
    var cur_beat = 0;

    var getCurrentNotes = function(cur_bar, cur_beat) {
      var current_notes = [];
      for (var i = 0; i < notes.length; i++) {
        if (notes[i].bar == cur_bar && notes[i].beat == cur_beat) {
          current_notes.push(notes[i]);
        }
      }
      return current_notes;
    }

    var updateDrumNames = function(current_notes) {
      for (var i = 0; i < 3; i++) {
        if (current_notes[i]) {
          $('#drum-name' + i).text(drums[current_notes[i].drum]);
        } else {
          $('#drum-name' + i).text("");
        }
      }
    }

    var drawScoreAndSequence = function(cur_bar, cur_beat) {
      ctx.clearRect(LINE_SPREAD*4.9, 0, c.width, c.height);
      drawLines();
      sequence.draw(ctx, cur_bar, cur_beat);
    }

    var last_note_in_song = notes[notes.length-1];
    var last_loc_in_song = increment_locs(sequence, last_note_in_song.bar, last_note_in_song.beat);

    drawScoreAndSequence(cur_bar, cur_beat);
    updateDrumNames(getCurrentNotes(cur_bar, cur_beat));

    var stepSequence = function() {
      var cur_loc = increment_locs(sequence, cur_bar, cur_beat);
      cur_bar = cur_loc[0];
      cur_beat = cur_loc[1];

      if (!(cur_bar == last_loc_in_song[0] && cur_beat >= last_loc_in_song[1])
       && !(cur_bar > last_loc_in_song[0])) {
        while (!getCurrentNotes(cur_bar,cur_beat)[0]) {
          cur_loc = increment_locs(sequence, cur_bar, cur_beat);
          cur_bar = cur_loc[0];
          cur_beat = cur_loc[1];
        }
      } else {
        decrement_locs(sequence, cur_bar, cur_beat);
      }

      drawScoreAndSequence(cur_bar, cur_beat);
      updateDrumNames(getCurrentNotes(cur_bar, cur_beat));

    }

    var stepBackSequence = function() {
      if (!(cur_bar == 0 && cur_beat == 0)) {
        var cur_loc = decrement_locs(sequence, cur_bar, cur_beat);
        cur_bar = cur_loc[0];
        cur_beat = cur_loc[1];

        while (!getCurrentNotes(cur_bar,cur_beat)[0]) {
          cur_loc = decrement_locs(sequence, cur_bar, cur_beat);
          cur_bar = cur_loc[0];
          cur_beat = cur_loc[1];
        }

        drawScoreAndSequence(cur_bar, cur_beat);
        updateDrumNames(getCurrentNotes(cur_bar, cur_beat));

      }
    }

    var testSequence = drawSequence.notes // TODO: remove this test code

    var hitSource = new EventSource("/serial");
    hitSource.onmessage = function(e) {
      var hit = jQuery.parseJSON (e.data);
      console.log(hit);

      // TODO: remove this test code
      // if (hit.drum == testSequence[0].drum) {
      //   testSequence.shift();
      //   stepSequence();
      // }
    }

    // hitSource.onopen = function (e) {
    //   console.log("OPEN state \n"+e.data);
    // };

    // hitSource.onmessage = function(e) {
    //   var hit = jQuery.parseJSON( e.data );
    //   console.log(hit.drum);

      // TODO: start time needs to accurately correlate to bar/beat in sequence
      // TODO: support for checking if both notes at same time are hit
    //   if (hit.drum == drawSequence.notes[hit.start].drum) {
    //     console.log("HIT");
    //     stepSequence();
    //   }
    // };

    // hitSource.onerror = function (e) {
    //    console.log("Error State  \n\n"+e.data);
    // };

    $("#next").click(function(evt) {
      stepSequence();
    });
    $("#back").click(function(evt) {
      stepBackSequence();
    });
  }



  var drawNotes = [];
  for (var i = 0; i < notes.length; i++) {
    drawNotes.push(new Note(notes[i]));
  }

  var drawSequence = new Sequence(drawNotes, sequence);

  startSequence(drawSequence);

</script>