<% content_for :title, "Practice" %>

<div class="song-info">
  <h1><%= @sequence.title %></h1>
  <h3><%= @sequence.artist %></h3>
  <h1 class="note-feedback">Good</h1>
  <button class="listen-btn"><i class="fa fa-headphones"></i></button>
  <button class="play-btn"><i class="fa fa-play"></i></button>
  <form class="song-settings form-inline">
    <div class="form-fields">
      <div class="header">
        <i class="fa fa-gear"></i> Settings
      </div>
      <div class="bpm">
        <div class="input-group col-sm-1">
          <input type="text" class="form-control" id="bpmInput" placeholder="<%= @sequence.bpm %>">
          <div class="input-group-addon">BPM</div>
        </div>
      </div>
      <div class="checkboxes">
        <label class="checkbox-inline">
          <input type="checkbox" id="enableMetronome" value="metronome" checked> Metronome
        </label>
        <label class="checkbox-inline">
          <input type="checkbox" id="enableLoop" value="loop"> Loop song
        </label>
        <label class="checkbox-inline">
          <input type="checkbox" id="enableStepByStep" value="stepbystep"> Step-by-step
        </label>
        <label class="checkbox-inline">
          <input type="checkbox" id="enableSticking" value="sticking" disabled> Sticking <span class="sticking">no info available for this song</span>
        </label>
      </div>
    </div>
  </form>
</div>

<canvas id="sheet" width="1400" height="720">
</canvas>

<div class="drum-name" id="drum-name0"></div>
<div class="drum-name" id="drum-name1"></div>
<div class="drum-name" id="drum-name2"></div>

<%= javascript_include_tag "practice" %>

<%= javascript_tag "var sequence = #{@sequence.to_json}" %>
<%= javascript_tag "var seqNotes = #{@sequence.notes.to_json}" %>
<%= javascript_tag do %>
  var sequence = <%= raw @sequence.to_json %>;
  var bars = <%= raw @sequence.vexflow.to_json %>
<% end %>

<script>
  var staveX = 0;
  var staveY = -10;
  var staveWidth = 174.5;
  var staveHeight = 90;

  if (sequence.bars == 2) {
    $("#sheet").attr("height", 720);
  }
  else {
    $("#sheet").attr("height", 360 * Math.floor(sequence.bars / 2 + 0.5));
  }

  var canvas = $("#sheet")[0];
  var renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS);

  var ctx = renderer.getContext();
  ctx.scale(4, 4);

  var mapping = ["a/5","g/5","f/5","e/5","d/5","c/5","a/4","f/4"];
  var staves = [];

  for (i = 0; i < bars.length; i++) { // bars
    var stave;

    if (sequence.bars == 2) {
      stave = new Vex.Flow.Stave(staveX, staveY, staveWidth * 2);
      if (i == 0) {
        stave.addClef("percussion").addTimeSignature(sequence.meter_top + "/" + sequence.meter_bottom);
        staveY += staveHeight;
      }
    }
    else if (i % 2 == 0) {
      stave = new Vex.Flow.Stave(staveX, staveY, staveWidth);
      if (i == 0) {
        stave.addClef("percussion").addTimeSignature(sequence.meter_top + "/" + sequence.meter_bottom);
      }
    }
    else {
      stave = new Vex.Flow.Stave(staveX + staveWidth, staveY, staveWidth);
      staveY += staveHeight;
    }
    stave.setContext(ctx).draw();

    var voices = [];
    for (j = 0; j < bars[i].length; j++) { // voices
      var notes = [];
      var noteBuffer = []; // used to separate quarter notes
      for (k = 0; k < bars[i][j].length; k++) { // note groups
        // separate into beam/no beam
        if (noteBuffer.length == 0) {
          noteBuffer.push(bars[i][j][k][0].duration < 1) // true if beam, false otherwise
        }
        else if (bars[i][j][k][0].duration < 1 != noteBuffer[0] || sequence.meter_bottom*noteBuffer.slice(1).reduce(function(p, c, i, a) { return p + 1/c.duration }, 0) == 1)  {
          notes.push(noteBuffer);
          noteBuffer = [bars[i][j][k][0].duration < 1];
        }

        // construct stave note
        if (bars[i][j][k].length == 1) { // single note
          var currNote = bars[i][j][k][0];
          if (currNote.drum == -1) { // rest
            if (currNote.duration * 100 % 3 == 0) {
              noteBuffer.push(new Vex.Flow.StaveNote({ keys: ["b/4"], duration: vexDuration(currNote.duration/3) + "r" }));
              noteBuffer.push(new Vex.Flow.StaveNote({ keys: ["b/4"], duration: vexDuration(2*currNote.duration/3) + "r" }));
            }
            else {
              noteBuffer.push(new Vex.Flow.StaveNote({ keys: ["b/4"], duration: vexDuration(currNote.duration) + "r" }));
            }
          }
          else { // note
            var newNote = new Vex.Flow.StaveNote({ keys: [mapping[currNote.drum]], duration: vexDuration(currNote.duration) });
            if (currNote.drum < 3) {
              newNote.note_heads[0].glyph_code = 'v3e';
            }
            noteBuffer.push(newNote);
          }
        }
        else { // chord
          var keys = [];
          var currNotes = bars[i][j][k];
          var cymbal_indices = [];
          for (l = 0; l < currNotes.length; l++) {
            keys.push(mapping[currNotes[l].drum]);
            if (currNotes[l].drum < 3) {
              cymbal_indices.push(l);
            }
          }
          var newNotes = new Vex.Flow.StaveNote({ keys: keys, duration: vexDuration(currNotes[0].duration) });
          for (l = 0; l < cymbal_indices.length; l++) {
            newNotes.note_heads[cymbal_indices[l]].glyph_code = 'v3e';
          }
          noteBuffer.push(newNotes);
        }
      }
      notes.push(noteBuffer);
      voices.push(notes);
    }

    // draw the bar
    var beams = [];

    for (m = 0; m < voices.length; m++) {
      for (n = 0; n < voices[m].length; n++) {
        if (voices[m][n].shift()) { // beam me up, scotty
          beams.push(new Vex.Flow.Beam(voices[m][n]));
        }
      }
      voices[m] = [].concat.apply([], voices[m]); // flatten bar
      Vex.Flow.Formatter.FormatAndDraw(ctx, stave, voices[m]);
    }

    for (n = 0; n < beams.length; n++) {
      beams[n].setContext(ctx).draw();
    }
    staves.push(stave);
  }

  function vexDuration(duration) {
    return (sequence.meter_bottom / duration) + "";
  }
</script>